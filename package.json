{
  "name": "will-finance-5.0",
  "version": "5.0.0",
  "description": "ðŸš€ Sistema de gerenciamento financeiro cyberpunk completo e multiplataforma com React + TypeScript + Vite frontend, NestJS backend, PostgreSQL, IA integrada, dockerizado e pronto para Electron/React Native.",
  "main": "index.js",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "scripts": {
    "install:all": "npm install && cd client && npm install && cd ../server && npm install && cd ..",
    "install:fix": "npm install --force && cd client && npm install --force && cd ../server && npm install --force && cd ..",
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:safe": "npm run db:quick-setup && concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:local": "concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:client": "cd client && npm run dev",
    "dev:server": "cd server && npm run dev",
    "dev:ai": "docker-compose up -d ia && npm run dev",
    "dev:db": "docker-compose -f docker-compose.dev.yml up -d",
    "dev:db:stop": "docker-compose -f docker-compose.dev.yml down",
    "dev:full": "npm run dev:db && npm run db:setup && npm run dev",
    "dev:silent": "concurrently --kill-others-on-fail \"npm run dev:server\" \"npm run dev:client\" > /dev/null 2>&1",
    "build": "cd client && npm run build && cd ../server && npm run build",
    "build:prod": "NODE_ENV=production npm run build && npm run optimize:images",
    "build:docker": "docker-compose build",
    "db:setup": "cd server && npx prisma generate && npx prisma migrate deploy && npx tsx src/prisma/seed.ts",
    "db:quick-setup": "cd server && npx prisma generate && npx prisma db push && npx tsx src/prisma/seed.ts",
    "db:studio": "cd server && npx prisma studio",
    "db:migrate": "cd server && npx prisma migrate dev",
    "db:reset": "cd server && npx prisma migrate reset --force && npx tsx src/prisma/seed.ts",
    "db:backup": "cd server && npm run db:backup",
    "start": "docker-compose up -d",
    "stop": "docker-compose down",
    "start:prod": "NODE_ENV=production cd server && npm run start:prod",
    "lint": "cd client && npm run lint && cd ../server && npm run lint",
    "lint:fix": "cd client && npm run lint:fix && cd ../server && npm run lint:fix",
    "format": "cd client && npm run format && cd ../server && npm run format",
    "test": "cd server && npm run test && cd ../client && npm run test",
    "test:e2e": "cd server && npm run test:e2e",
    "test:coverage": "cd server && npm run test:cov",
    "test:all": "npm run test && cd client && npm run test && cd ..",
    "validate:all": "npm run lint && npm run test && npm run build",
    "validate:security": "powershell -ExecutionPolicy Bypass -File .\\scripts\\validate-security.ps1",
    "validate:complete": "powershell -ExecutionPolicy Bypass -File .\\scripts\\validate-complete.ps1",
    "fix:all": "npm run lint:fix && npm run format",
    "fix:security": "powershell -ExecutionPolicy Bypass -File .\\scripts\\fix-security-issues.ps1",
    "audit:all": "npm audit && cd client && npm audit && cd ../server && npm audit && cd ..",
    "security:audit:all": "npm audit && npm run audit --workspaces",
    "build:prod:secure": "npm run validate:security && npm run test:all && npm run build:prod",
    "check:all": "cd client && npm run check:all && cd ../server && npm run check:all",
    "check:outdated": "npm outdated && cd client && npm outdated && cd ../server && npm outdated",
    "deploy:check": "npm run validate:complete && npm run health:check",
    "health:check": "node scripts/health-monitor.js check",
    "health:monitor": "node scripts/health-monitor.js monitor",
    "health:help": "node scripts/health-monitor.js help",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:prod": "docker-compose -f docker-compose.prod.yml up -d",
    "docker:logs": "docker-compose logs -f",
    "clean": "node scripts/clean.js",
    "clean:cache": "npm cache clean --force && cd client && npm cache clean --force && cd ../server && npm cache clean --force",
    "clean:all": "npm run clean && npm run clean:cache && docker system prune -f",
    "optimize:images": "echo 'Compressing images...' && find . -name '*.png' -exec optipng -o5 {} \\;",
    "docs": "cd server && npm run docs && cd ../client && npm run docs",
    "audit:fix": "npm audit fix && cd client && npm audit fix && cd ../server && npm audit fix",
    "update:deps": "npm update && cd client && npm update && cd ../server && npm update",
    "prepare": "husky",
    "pre-commit": "lint-staged",
    "postinstall": "if [ \"$NODE_ENV\" = \"development\" ]; then npm run build; fi || echo 'Build failed, but continuing...'"
  },
  "keywords": [
    "finance",
    "financial-management",
    "cyberpunk",
    "react",
    "typescript",
    "nestjs",
    "nodejs",
    "postgresql",
    "prisma",
    "ai",
    "real-time",
    "websocket",
    "docker",
    "pwa",
    "electron",
    "react-native",
    "multiplataforma",
    "vite",
    "tailwindcss"
  ],
  "author": {
    "name": "William",
    "email": "william@willfinance.com",
    "url": "https://github.com/william"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/william/will-finance-5.0.git"
  },
  "bugs": {
    "url": "https://github.com/william/will-finance-5.0/issues"
  },
  "homepage": "https://github.com/william/will-finance-5.0#readme",
  "devDependencies": {
    "concurrently": "^8.2.2",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.2",
    "typescript": "^5.8.3",
    "rimraf": "^5.0.5",
    "optipng-bin": "^7.0.1"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "form-data": "^4.0.3"
  },
  "lint-staged": {
    "server/src/**/*.{ts,js}": [
      "npm run lint:fix --workspace=server",
      "npm run format --workspace=server"
    ],
    "client/src/**/*.{ts,tsx,js,jsx}": [
      "npm run lint --workspace=client"
    ]
  },
  "workspaces": {
    "packages": ["client", "server", "ia"],
    "nohoist": ["**/esbuild", "esbuild"]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "optionalDependencies": {
    "@electron/rebuild": "^3.2.10"
  }
}
