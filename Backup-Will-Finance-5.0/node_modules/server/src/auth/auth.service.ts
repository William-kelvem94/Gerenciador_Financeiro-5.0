import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { PrismaService } from '../prisma/prisma.service';
import * as bcrypt from 'bcryptjs';

@Injectable()
@Injectable()
export class AuthService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly jwtService: JwtService,
  ) {}

  async register(data: { email: string; name: string; password: string }) {
    const { email, name, password } = data;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await this.prisma.user.create({
      data: {
        email,
        name,
        password: hashedPassword,
      },
      select: {
        id: true,
        email: true,
        name: true,
      },
    });
    const token = this.jwtService.sign({ userId: user.id });
    return {
      success: true,
      user,
      token,
    };
  }

  async login(data: { email: string; password: string }) {
    const { email, password } = data;
    const user = await this.prisma.user.findUnique({
      where: { email },
    });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      throw new Error('Credenciais inválidas');
    }
    const token = this.jwtService.sign({ userId: user.id });
    return {
      success: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
      },
      token,
    };
  }

  /**
   * Login social via Firebase/Google
   * Recebe decoded token do Firebase, busca/cria usuário, retorna JWT local
   */
  async firebaseLogin(decoded: unknown) {
    // Validação rigorosa do token decodificado
    if (!decoded || typeof decoded !== 'object' || !('email' in decoded)) {
      throw new Error('Usuário Firebase sem email');
    }
    type DecodedFirebase = {
      email: string;
      name?: string;
      picture?: string;
      uid: string;
    };
    const safeDecoded = decoded as DecodedFirebase;
    if (typeof safeDecoded.email !== 'string') {
      throw new Error('Email do Firebase inválido');
    }
    let user = await this.prisma.user.findUnique({
      where: { email: safeDecoded.email },
    });
    if (!user) {
      await this.prisma.user.create({
        data: {
          email: safeDecoded.email,
          name: safeDecoded.name || safeDecoded.email,
          password: '', // Não tem senha local
          avatar: safeDecoded.picture || null,
          createdAt: new Date(),
          updatedAt: new Date(),
          budgetAlerts: true,
          currency: 'BRL',
          dateFormat: 'DD/MM/YYYY',
          emailNotifications: true,
          emailVerified: false,
          goalReminders: true,
          isEmailPublic: false,
          isProfilePublic: false,
          language: 'pt-BR',
          monthlyBudget: null,
          pushNotifications: true,
          savingsGoal: null,
          theme: 'dark',
          timezone: 'America/Sao_Paulo',
          twoFactorEnabled: false,
          twoFactorSecret: null,
        },
      });
      user = await this.prisma.user.findUnique({
        where: { email: safeDecoded.email },
      });
    }
    if (!user) {
      throw new Error('Falha ao criar usuário Firebase');
    }
    // Emite JWT local
    const token = this.jwtService.sign({ userId: user.id });
    return {
      success: true,
      user,
      token,
      firebaseUid: safeDecoded.uid,
      provider: 'firebase',
    };
  }
}
