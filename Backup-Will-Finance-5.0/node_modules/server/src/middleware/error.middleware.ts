import { Request, Response, NextFunction } from 'express';
import { BaseError, InternalServerError } from '../shared/errors/base.error';
import { logger } from '../shared/utils/logger';

/**
 * Middleware global para tratamento de erros enterprise.
 * Captura erros operacionais e n√£o-operacionais, loga e retorna resposta estruturada.
 */
export function errorHandler(
  err: Error,
  req: Request,
  res: Response,
  next: NextFunction
): void {
  // Log contexto do erro
  logger.error('Erro capturado pelo errorHandler', {
    message: err.message,
    stack: err.stack,
    url: req.url,
    method: req.method,
    userAgent: req.get('User-Agent'),
    ip: req.ip,
    userId: (req as any).user?.id,
    timestamp: new Date().toISOString(),
  });

  if (err instanceof BaseError) {
    res.status(err.statusCode).json({
      success: false,
      message: err.message,
      code: err.code,
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),
    });
  } else {
    res.status(500).json({
      success: false,
      message: process.env.NODE_ENV === 'production'
        ? 'Erro interno do servidor'
        : err.message,
      code: 'INTERNAL_SERVER_ERROR',
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack }),
    });
  }
}
