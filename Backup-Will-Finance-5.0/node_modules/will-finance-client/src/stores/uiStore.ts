import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

export type Theme = 'dark' | 'light' | 'cyberpunk';

export interface UIState {
  theme: Theme;
  sidebarCollapsed: boolean;
  isLoading: boolean;
  notifications: Notification[];
  modal: {
    isOpen: boolean;
    type: string | null;
    data: any;
  };

  // Actions
  setTheme: (theme: Theme) => void;
  toggleSidebar: () => void;
  setSidebarCollapsed: (collapsed: boolean) => void;
  setLoading: (loading: boolean) => void;
  addNotification: (notification: Omit<Notification, 'id'>) => void;
  removeNotification: (id: string) => void;
  showSuccess: (message: string, title?: string, duration?: number) => void;
  showError: (message: string, title?: string, duration?: number) => void;
  showInfo: (message: string, title?: string, duration?: number) => void;
  showWarning: (message: string, title?: string, duration?: number) => void;
  openModal: (type: string, data?: any) => void;
  closeModal: () => void;
}

export interface Notification {
  id: string;
  type: 'info' | 'success' | 'warning' | 'error';
  title: string;
  message: string;
  duration?: number;
  timestamp: number;
}

export const useUIStore = create<UIState>()(
  devtools(
    (set, get) => ({
      theme: 'cyberpunk',
      sidebarCollapsed: false,
      isLoading: false,
      notifications: [],
      modal: {
        isOpen: false,
        type: null,
        data: null,
      },

      setTheme: (theme: Theme) => {
        set({ theme });
        document.documentElement.setAttribute('data-theme', theme);
        if (theme === 'dark' || theme === 'cyberpunk') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      },
      toggleSidebar: () => {
        set((state: UIState) => ({ sidebarCollapsed: !state.sidebarCollapsed }));
      },
      setSidebarCollapsed: (collapsed: boolean) => {
        set({ sidebarCollapsed: collapsed });
      },
      setLoading: (loading: boolean) => {
        set({ isLoading: loading });
      },
      addNotification: (notification: Omit<Notification, 'id'>) => {
        const id = Date.now().toString();
        const newNotification: Notification = {
          ...notification,
          id,
          timestamp: Date.now(),
        };
        set((state: UIState) => ({
          notifications: [...state.notifications, newNotification],
        }));
        if (notification.duration !== 0) {
          setTimeout(() => {
            get().removeNotification(id);
          }, notification.duration || 5000);
        }
      },
      removeNotification: (id: string) => {
        set((state: UIState) => ({
          notifications: state.notifications.filter(n => n.id !== id),
        }));
      },
      showSuccess: (message: string, title: string = 'Sucesso', duration: number = 4000) => {
        get().addNotification({
          type: 'success',
          title,
          message,
          duration,
  timestamp: Date.now(),
  });
      },
      showError: (message: string, title: string = 'Erro', duration: number = 4000) => {
        get().addNotification({
          type: 'error',
          title,
          message,
          duration,
  timestamp: Date.now(),
  });
      },
      showInfo: (message: string, title: string = 'Info', duration: number = 4000) => {
        get().addNotification({
          type: 'info',
          title,
          message,
          duration,
  timestamp: Date.now(),
  });
      },
      showWarning: (message: string, title: string = 'Atenção', duration: number = 4000) => {
        get().addNotification({
          type: 'warning',
          title,
          message,
          duration,
  timestamp: Date.now(),
  });
      },
      openModal: (type: string, data: any = null) => {
        set({
          modal: {
            isOpen: true,
            type,
            data,
          },
        });
      },
      closeModal: () => {
        set({
          modal: {
            isOpen: false,
            type: null,
            data: null,
          },
        });
      },
    }),
    { name: 'ui-store' }
  )
);

// Helpers para uso global
export function showSuccess(message: string, title?: string, duration?: number): void {
  useUIStore.getState().showSuccess(message, title, duration);
}
export function showError(message: string, title?: string, duration?: number): void {
  useUIStore.getState().showError(message, title, duration);
}
export function showInfo(message: string, title?: string, duration?: number): void {
  useUIStore.getState().showInfo(message, title, duration);
}
export function showWarning(message: string, title?: string, duration?: number): void {
  useUIStore.getState().showWarning(message, title, duration);
}
