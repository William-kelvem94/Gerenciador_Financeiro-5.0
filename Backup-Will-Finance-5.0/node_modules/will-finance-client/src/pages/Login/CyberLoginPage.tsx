import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useAuthStore } from '../../stores/authStore';
import toast from 'react-hot-toast';
import { 
  Lock, 
  Mail, 
  Eye, 
  EyeOff, 
  Zap, 
  UserPlus, 
  LogIn,
  Shield,
  Terminal,
  Cpu,
  WifiOff,
  Globe
} from 'lucide-react';

// Cyber Logo Component
const CyberLogo: React.FC = () => (
  <motion.div
    initial={{ opacity: 0, scale: 0.5 }}
    animate={{ opacity: 1, scale: 1 }}
    transition={{ duration: 0.8, type: 'spring' }}
    className="relative"
  >
    <div className="text-6xl font-cyber font-black text-center">
      <span className="text-glow animate-pulse-glow">WILL</span>
      <br />
      <span className="text-glow-pink">FINANCE</span>
      <br />
      <span className="text-glow-green text-2xl font-mono">v5.0 CYBER</span>
    </div>
    
    {/* Circuit Lines */}
    <div className="absolute -top-4 -left-4 w-2 h-2 bg-cyan-400 rounded-full animate-pulse" />
    <div className="absolute -top-2 -right-8 w-1 h-1 bg-pink-400 rounded-full animate-pulse" />
    <div className="absolute -bottom-4 -right-4 w-3 h-3 bg-green-400 rounded-full animate-pulse" />
    
    {/* Connecting Lines */}
    <svg className="absolute inset-0 w-full h-full pointer-events-none opacity-30">
      <defs>
        <linearGradient id="lineGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#00FFFF" />
          <stop offset="50%" stopColor="#FF0080" />
          <stop offset="100%" stopColor="#39FF14" />
        </linearGradient>
      </defs>
      <path
        d="M 0,0 Q 50,25 100,0 T 200,0"
        stroke="url(#lineGradient)"
        strokeWidth="1"
        fill="none"
        className="animate-pulse"
      />
    </svg>
  </motion.div>
);

// Input Field Component
interface CyberInputProps {
  type: string;
  placeholder: string;
  value: string;
  onChange: (value: string) => void;
  icon: React.ReactNode;
  required?: boolean;
  showPasswordToggle?: boolean;
  onTogglePassword?: () => void;
}

const CyberInput: React.FC<CyberInputProps> = ({
  type,
  placeholder,
  value,
  onChange,
  icon,
  required = false,
  showPasswordToggle = false,
  onTogglePassword
}) => (
  <div className="relative group">
    <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-cyan-400 z-10">
      {React.cloneElement(icon as React.ReactElement, {
        className: 'w-5 h-5'
      })}
    </div>
    
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      required={required}
      className={`
        w-full pl-12 pr-12 py-4 bg-gray-900/50 backdrop-blur-lg
        border border-gray-600 rounded-lg text-white placeholder-gray-400
        transition-all duration-300 ease-in-out font-mono
        focus:outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20
        focus:bg-gray-900/70 group-hover:border-gray-500
      `}
    />
    
    {showPasswordToggle && (
      <button
        type="button"
        onClick={onTogglePassword}
        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-cyan-400 transition-colors z-10"
      >
        {type === 'password' ? (
          <EyeOff className="w-5 h-5" />
        ) : (
          <Eye className="w-5 h-5" />
        )}
      </button>
    )}
    
    {/* Input Glow Effect */}
    <div className="absolute inset-0 rounded-lg opacity-0 group-focus-within:opacity-100 transition-opacity duration-300">
      <div className="absolute inset-0 rounded-lg border border-cyan-400/50 animate-pulse" />
    </div>
  </div>
);


// System Status Component
const SystemStatus: React.FC = () => {
  const [status, setStatus] = useState<'online' | 'maintenance' | 'error'>('online');
  
  useEffect(() => {
    // Simulate system status check
    const timer = setTimeout(() => setStatus('online'), 1000);
    return () => clearTimeout(timer);
  }, []);

  const statusConfig = {
    online: {
      color: 'text-green-400',
      bg: 'bg-green-900/20 border-green-400/30',
      icon: <Globe className="w-4 h-4" />,
      text: 'Sistemas Online'
    },
    maintenance: {
      color: 'text-yellow-400',
      bg: 'bg-yellow-900/20 border-yellow-400/30',
      icon: <WifiOff className="w-4 h-4" />,
      text: 'Manutenção'
    },
    error: {
      color: 'text-red-400',
      bg: 'bg-red-900/20 border-red-400/30',
      icon: <Shield className="w-4 h-4" />,
      text: 'Sistema Indisponível'
    }
  };

  const config = statusConfig[status];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5, delay: 0.8 }}
      className={`inline-flex items-center space-x-2 px-3 py-1 rounded-full text-sm ${config.bg}`}
    >
      <div className={`${config.color}`}>
        {config.icon}
      </div>
      <span className={`font-mono ${config.color}`}>{config.text}</span>
      <div className={`w-2 h-2 rounded-full ${config.color.replace('text', 'bg')} animate-pulse`} />
    </motion.div>
  );
};

export function CyberLoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [isRegisterMode, setIsRegisterMode] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const { login, register, isAuthenticated, user } = useAuthStore();
  const navigate = useNavigate();

  // Monitor authentication state changes
  useEffect(() => {
    if (isAuthenticated && user) {
      navigate('/dashboard');
    }
  }, [isAuthenticated, user, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password || (isRegisterMode && !name)) {
      toast.error('Por favor, preencha todos os campos!');
      return;
    }

    setLoading(true);
    
    try {
      if (isRegisterMode) {
        await register(name, email, password);
        toast.success('Conta criada com sucesso!');
      } else {
        await login(email, password);
        toast.success('Login realizado com sucesso!');
      }
    } catch (error) {
      console.error('Erro na autenticação:', error);
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Erro na autenticação. Tente novamente.'
      );
    } finally {
      setLoading(false);
    }
  };


  const toggleMode = () => {
    setIsRegisterMode(!isRegisterMode);
    setEmail('');
    setPassword('');
    setName('');
  };

  return (
    <div className="min-h-screen bg-black relative overflow-hidden flex items-center justify-center">
      {/* Background Effects */}
      <div className="absolute inset-0">
        {/* Gradient Orbs */}
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-cyan-400/10 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-pink-400/10 rounded-full blur-3xl animate-pulse" 
             style={{ animationDelay: '1s' }} />
        <div className="absolute top-3/4 left-3/4 w-64 h-64 bg-green-400/10 rounded-full blur-3xl animate-pulse"
             style={{ animationDelay: '2s' }} />
        
        {/* Grid Pattern */}
        <div className="absolute inset-0 opacity-5">
          <div className="w-full h-full"
               style={{
                 backgroundImage: `
                   linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
                   linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px)
                 `,
                 backgroundSize: '50px 50px'
               }} />
        </div>
      </div>

      {/* Main Content */}
      <div className="relative z-10 w-full max-w-md mx-auto p-6">
        {/* Logo Section */}
        <div className="text-center mb-8">
          <CyberLogo />
        </div>

        {/* Login Form */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="glass-effect rounded-2xl p-8 space-y-6"
        >
          {/* Form Header */}
          <div className="text-center space-y-2">
            <h2 className="text-2xl font-cyber font-bold text-cyan-400">
              {isRegisterMode ? 'CRIAR CONTA' : 'ACESSO SISTEMA'}
            </h2>
            <div className="w-16 h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent mx-auto" />
            <p className="text-gray-400 font-mono text-sm">
              {isRegisterMode 
                ? 'Configure sua conta no sistema' 
                : 'Autentique-se para continuar'
              }
            </p>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {isRegisterMode && (
              <CyberInput
                type="text"
                placeholder="Nome completo"
                value={name}
                onChange={setName}
                icon={<UserPlus />}
                required
              />
            )}

            <CyberInput
              type="email"
              placeholder="Email de acesso"
              value={email}
              onChange={setEmail}
              icon={<Mail />}
              required
            />

            <CyberInput
              type={showPassword ? 'text' : 'password'}
              placeholder="Senha de segurança"
              value={password}
              onChange={setPassword}
              icon={<Lock />}
              required
              showPasswordToggle
              onTogglePassword={() => setShowPassword(!showPassword)}
            />

            {/* Submit Button */}
            <motion.button
              type="submit"
              disabled={loading}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className={`
                w-full py-4 px-6 rounded-lg font-mono font-bold uppercase tracking-wider
                transition-all duration-300 ease-in-out relative overflow-hidden
                ${loading 
                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed' 
                  : 'bg-gradient-to-r from-cyan-400 to-blue-500 text-black hover:from-cyan-300 hover:to-blue-400'
                }
              `}
              style={{
                boxShadow: loading ? 'none' : '0 0 30px rgba(0, 255, 255, 0.4)'
              }}
            >
              {loading ? (
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full animate-spin" />
                  <span>Processando...</span>
                </div>
              ) : (
                <div className="flex items-center justify-center space-x-2">
                  {isRegisterMode ? <UserPlus className="w-5 h-5" /> : <LogIn className="w-5 h-5" />}
                  <span>{isRegisterMode ? 'Criar Conta' : 'Acessar Sistema'}</span>
                </div>
              )}
            </motion.button>
          </form>

          {/* Mode Toggle */}
          <div className="text-center">
            <button
              onClick={toggleMode}
              className="text-gray-400 hover:text-cyan-400 font-mono text-sm transition-colors duration-300"
            >
              {isRegisterMode 
                ? 'Já possui conta? Fazer login' 
                : 'Não possui conta? Criar uma'
              }
            </button>
          </div>

        </motion.div>

        {/* System Status */}
        <div className="text-center mt-6">
          <SystemStatus />
        </div>

        {/* Footer */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 1 }}
          className="text-center mt-8 space-y-2"
        >
          <p className="text-gray-500 text-xs font-mono">
            WILL FINANCE v5.0 © 2025 - Sistema de Gestão Financeira
          </p>
          <div className="flex items-center justify-center space-x-2 text-gray-600">
            <Cpu className="w-4 h-4" />
            <span className="text-xs font-mono">Powered by React + TypeScript</span>
          </div>
        </motion.div>
      </div>
    </div>
  );
}

// Export both components for backward compatibility
export default CyberLoginPage;
// ...export removido, arquivo será excluído
