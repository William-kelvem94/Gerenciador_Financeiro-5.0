import { useEffect, Suspense, lazy } from 'react';
import { BrowserRouter as Router, Navigate } from 'react-router-dom';
import { Routes, Route } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { ToastContainer } from 'react-toastify';
import { motion } from 'framer-motion';
import { useAuthStore } from './stores/authStore';
import { ThemeProvider } from './contexts/ThemeContext';
const Layout = lazy(() => import('./components/layout/Layout').then(module => ({ default: module.default })));
const LoginPage = lazy(() => import('./pages/Login/LoginPage').then(module => ({ default: module.LoginPage })));
const CyberDashboard = lazy(() => import('./pages/Dashboard/CyberDashboard').then(module => ({ default: module.default })));
const TransactionsPage = lazy(() => import('./pages/Transactions/TransactionsPage').then(module => ({ default: module.default })));
const BudgetsPage = lazy(() => import('./pages/Budgets/BudgetsPage').then(module => ({ default: module.default })));
const ReportsPage = lazy(() => import('./pages/Reports/ReportsPage').then(module => ({ default: module.default })));
const SettingsPage = lazy(() => import('./pages/Settings/SettingsPage').then(module => ({ default: module.default })));
const ImportExportPage = lazy(() => import('./pages/ImportExport/ImportExportPage').then(module => ({ default: module.default })));
const AuthCallback = lazy(() => import('./components/auth/AuthCallback').then(module => ({ default: module.default })));

// Importar estilos do react-toastify
import 'react-toastify/dist/ReactToastify.css';

function App() {
  const { isAuthenticated, user } = useAuthStore();
  // Adiciona função de inicialização de autenticação se existir
  useEffect(() => {
    // Inicializa listener de autenticação (ajuste para compatibilidade)
    const initializeAuth = (window as any).initializeAuth || (() => {});
    if (typeof initializeAuth === 'function') {
      initializeAuth();
    }
    // Não retornar JSX aqui, apenas executar efeito
    return undefined;
  }, []);

  useEffect(() => {
    if (isAuthenticated && user) {
      console.log('✅ Usuário autenticado:', user.email);
    }
  }, [isAuthenticated, user]);

  return (
    <ThemeProvider>
      <Router>
        <Suspense
          fallback={
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="min-h-screen flex items-center justify-center bg-black"
            >
              <div className="text-center card p-8 animate-pulse-neon">
                <h1 className="text-4xl font-bold text-cyber-primary mb-4 text-glow">Carregando...</h1>
                <p className="text-white-secondary">Aguarde, carregando interface cyberpunk...</p>
              </div>
            </motion.div>
          }
        >
          <div className="min-h-screen bg-black text-white transition-colors duration-300">
            <Routes>
              {/* Public routes */}
              <Route 
                path="/login" 
                element={isAuthenticated ? <Navigate to="/dashboard" replace /> : <LoginPage />} 
              />
              {/* <Route 
                path="/register" 
                element={isAuthenticated ? <Navigate to="/dashboard" replace /> : <RegisterPage />} 
              /> */}
              <Route 
                path="/auth/callback" 
                element={<AuthCallback />} 
              />
              {/* Protected routes */}
              <Route 
                path="/" 
                element={isAuthenticated ? <Layout /> : <Navigate to="/login" replace />}
              >
                <Route index element={<Navigate to="/dashboard" replace />} />
                <Route path="dashboard" element={<CyberDashboard />} />
                <Route path="transactions" element={<TransactionsPage />} />
                <Route path="budgets" element={<BudgetsPage />} />
                <Route path="reports" element={<ReportsPage />} />
                <Route path="settings" element={<SettingsPage />} />
                <Route path="import-export" element={<ImportExportPage />} />
              </Route>
              {/* 404 fallback */}
              <Route 
                path="*" 
                element={
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="min-h-screen flex items-center justify-center bg-black"
                  >
                    <div className="text-center card p-8">
                      <h1 className="text-6xl font-bold text-cyber-primary mb-4 text-glow">404</h1>
                      <p className="text-white-secondary mb-8">Página não encontrada no nexus</p>
                      <button 
                        onClick={() => window.history.back()}
                        className="btn-primary"
                      >
                        Voltar ao Sistema
                      </button>
                    </div>
                  </motion.div>
                } 
              />
            </Routes>
            {/* Global toast notifications */}
            {/* Toaster do react-hot-toast pode ser removido se não estiver sendo usado, ou mantido se necessário. Certifique-se que a versão instalada é compatível com React 18. */}
            <Toaster 
              position="top-right"
              toastOptions={{
                duration: 4000,
                style: {
                  background: 'var(--color-bg-card)',
                  color: 'var(--color-text-primary)',
                  border: '1px solid var(--color-primary)',
                  borderRadius: '8px',
                  boxShadow: '0 0 10px var(--color-neon-shadow)',
                },
                success: {
                  iconTheme: {
                    primary: 'var(--color-success)',
                    secondary: 'var(--color-bg-primary)',
                  },
                },
                error: {
                  iconTheme: {
                    primary: 'var(--color-error)',
                    secondary: 'var(--color-bg-primary)',
                  },
                },
              }}
            />
            {/* React Toastify para notificações aprimoradas */}
            <ToastContainer
              position="top-right"
              autoClose={5000}
              hideProgressBar={false}
              newestOnTop={false}
              closeOnClick={true}
              rtl={false}
              pauseOnFocusLoss={true}
              draggable={true}
              pauseOnHover={true}
              theme="dark"
              toastStyle={{
                backgroundColor: 'var(--background-secondary, #1A1A2E)',
                color: 'var(--foreground, #FFFFFF)',
                border: '1px solid var(--cyber-primary, #00FFFF)',
                borderRadius: '8px',
                boxShadow: '0 0 10px rgba(0, 255, 255, 0.3)',
              }}
            />
          </div>
        </Suspense>
      </Router>
    </ThemeProvider>

  );
}
export default App;
