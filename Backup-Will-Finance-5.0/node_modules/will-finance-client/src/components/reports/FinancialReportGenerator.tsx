import { usePDF } from '@react-pdf/renderer';
import { FinancialReportPDF } from './FinancialReportPDF';
import { motion } from 'framer-motion';
import React, { useState } from 'react';
type FamilyUser = { id: string; name: string; role: string };
type ReportData = {
  user: { name: string; role: string };
  period: { start: string; end: string };
  summary: {
    totalIncome: number;
    totalExpenses: number;
    balance: number;
    transactionCount: number;
  };
  categoryBreakdown: Record<string, number>;
  monthlyTrend: Array<{ month: string; income: number; expenses: number; balance: number }>;
  transactions: Array<{
    id: string;
    date: string;
    description: string;
    amount: number;
    type: 'income' | 'expense';
    category: string;
  }>;
};

const pdfStyles = {
  page: {
    flexDirection: 'column',
    backgroundColor: '#FFFFFF',
    padding: 30,
    fontSize: 12,
    fontFamily: 'Helvetica'
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0891b2',
    marginBottom: 8
  },
  table: {
    width: '100%',
    marginBottom: 10
  },
  tableRow: {
    margin: 'auto',
    flexDirection: 'row',
  },
  tableHeader: {
    backgroundColor: '#0891b2',
    color: 'white',
    fontWeight: 'bold',
  },
  tableCell: {
    margin: 0,
    marginTop: 5,
    padding: 8,
    fontSize: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
    borderStyle: 'solid',
    flex: 1
  },
  summaryCard: {
    backgroundColor: '#f8fafc',
    padding: 15,
    marginBottom: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e2e8f0',
    borderStyle: 'solid',
  },
  summaryTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 5
  },
  summaryValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#0891b2'
  },
  positive: {
    color: '#059669'
  },
  negative: {
    color: '#dc2626'
  },
  footer: {
    fontSize: 10,
    color: '#666',
    marginTop: 30,
    textAlign: 'center',
  }
}
// Se StyleSheet.create n√£o existe, defina pdfStyles como um objeto simples
// Removido objeto vazio duplicado

// Componente principal
const FinancialReportGenerator: React.FC = () => {
  // Usu√°rios mock
  const [users] = useState<FamilyUser[]>([
    { id: '1', name: 'Will', role: 'Master' },
    { id: '2', name: 'Ana', role: 'Admin' },
    { id: '3', name: 'Lucas', role: 'User' },
  ]);
  const [selectedUser, setSelectedUser] = useState<FamilyUser | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [reportData, setReportData] = useState<ReportData | null>(null);

  // Helpers de notifica√ß√£o
  const showError = (msg: string) => {
    alert(msg);
  };
  const showSuccess = (msg: string) => {
    alert(msg);
  };

  // Fun√ß√£o para gerar dados de relat√≥rio (mock)
  function generateSampleData(user: FamilyUser): ReportData {
  // Per√≠odo do relat√≥rio: √∫ltimos 3 meses
  const endDate = new Date();
  const startDate = new Date();
  startDate.setMonth(endDate.getMonth() - 2);

  // Categorias mock
  const categories = [
    'Alimenta√ß√£o', 'Transporte', 'Sa√∫de', 'Lazer', 'Educa√ß√£o', 'Moradia', 'Outros'
  ];

  // Gerar transa√ß√µes mock
  const transactions: ReportData['transactions'] = [];
  for (let i = 0; i < 60; i++) {
    const isIncome = Math.random() > 0.4;
    const amount = Math.round((Math.random() * 4000 + 100) * 100) / 100;
    const date = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));
    transactions.push({
      id: `tx_${i}`,
      date: date.toISOString(),
      description: isIncome 
        ? `Receita ${i + 1} - Sal√°rio/Freelance`
        : `Despesa ${i + 1} - ${categories[Math.floor(Math.random() * categories.length)]}`,
      amount: isIncome ? amount : -amount,
      type: isIncome ? 'income' : 'expense',
      category: isIncome ? 'Receita' : categories[Math.floor(Math.random() * categories.length)]
    });
  }

  // Calcular resumo
  const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
  const totalExpenses = Math.abs(transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0));

  // Calcular breakdown por categoria
  const categoryBreakdown: Record<string, number> = {};
  transactions.filter(t => t.type === 'expense').forEach(t => {
    categoryBreakdown[t.category] = (categoryBreakdown[t.category] || 0) + Math.abs(t.amount);
  });

  // Gerar tend√™ncia mensal
  const monthlyTrend: Array<{ month: string; income: number; expenses: number; balance: number }> = [];
  for (let i = 2; i >= 0; i--) {
    const monthDate = new Date();
    monthDate.setMonth(monthDate.getMonth() - i);
    const monthName = monthDate.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
    monthlyTrend.push({
      month: monthName,
      income: totalIncome / 3 + (Math.random() - 0.5) * 1000,
      expenses: totalExpenses / 3 + (Math.random() - 0.5) * 500,
      balance: (totalIncome - totalExpenses) / 3 + (Math.random() - 0.5) * 800
    });
  }

    return {
      user: { name: user.name, role: user.role },
      period: { start: startDate.toISOString(), end: endDate.toISOString() },
      summary: {
        totalIncome,
        totalExpenses,
        balance: totalIncome - totalExpenses,
        transactionCount: transactions.length
      },
      categoryBreakdown,
      monthlyTrend,
      transactions
    };
  }

  // Gerar relat√≥rio
  const generateReport = async () => {
    if (!selectedUser) {
      showError('Selecione um usu√°rio primeiro');
      return;
    }
    setIsGenerating(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      const data = generateSampleData(selectedUser);
      setReportData(data);
      showSuccess('Relat√≥rio gerado com sucesso!');
    } catch (error) {
      showError('Erro ao gerar relat√≥rio');
      console.error('Erro:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // Exportar para HTML (placeholder)
  const exportToHTML = async () => {
    showSuccess('Relat√≥rio exportado como PDF!');
  };

  return (
    <div className="space-y-6">
      {/* Sele√ß√£o de usu√°rio e controles */}
      <div className="bg-gray-900/50 backdrop-blur-sm border border-cyan-500/20 rounded-xl p-6">
        <h2 className="text-xl font-bold text-white mb-4">üìä Gerador de Relat√≥rios Financeiros</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Usu√°rio para o relat√≥rio
            </label>
            <select
              value={selectedUser?.id || ''}
              onChange={(e) => {
                const user = users.find(u => u.id === e.target.value);
                setSelectedUser(user || null);
              }}
              className="w-full px-3 py-2 bg-gray-800/50 border border-gray-600/50 rounded-lg text-white focus:border-cyan-400/50 focus:outline-none"
            >
              <option value="">Selecione um usu√°rio</option>
              {users.map(user => (
                <option key={user.id} value={user.id}>
                  {user.name} ({user.role})
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="flex gap-3">
          <motion.button
            onClick={generateReport}
            disabled={!selectedUser || isGenerating}
            className="flex items-center gap-2 px-4 py-2 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 text-white rounded-lg transition-colors"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {isGenerating ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                Gerando...
              </>
            ) : (
              <>
                üìä Gerar Relat√≥rio
              </>
            )}
          </motion.button>

          {reportData && (
            <motion.button
              onClick={exportToHTML}
              className="flex items-center gap-2 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              üìÑ Exportar PDF (HTML2Canvas)
            </motion.button>
          )}
        </div>
      </div>

      {/* Preview do relat√≥rio */}
      {reportData && (
        <div className="bg-gray-900/50 backdrop-blur-sm border border-cyan-500/20 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-bold text-white">Preview do Relat√≥rio</h3>
            
            {/* Bot√£o de download PDF usando hook usePDF */}
            {(() => {
              const [instance, updateInstance] = usePDF({
                document: <FinancialReportPDF data={reportData} />,
              });
              return (
                <button
                  className="flex items-center gap-2 px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors"
                  disabled={instance.loading}
                  onClick={() => {
                    if (instance.url) {
                      const a = document.createElement('a');
                      a.href = instance.url;
                      a.download = `relatorio-financeiro-${reportData.user.name}-${new Date().toISOString().split('T')[0]}.pdf`;
                      a.click();
                    } else {
                      updateInstance(<FinancialReportPDF data={reportData} />);
                    }
                  }}
                >
                  {instance.loading ? '‚è≥ Gerando PDF...' : 'üìÅ Download PDF (React-PDF)'}
                </button>
              );
            })()}
          </div>

          {/* Resumo r√°pido */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-4">
              <div className="text-green-400 text-sm font-medium">Receitas</div>
              <div className="text-xl font-bold text-white">
                R$ {reportData.summary.totalIncome.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
              </div>
            </div>
            
            <div className="bg-red-500/20 border border-red-500/30 rounded-lg p-4">
              <div className="text-red-400 text-sm font-medium">Despesas</div>
              <div className="text-xl font-bold text-white">
                R$ {reportData.summary.totalExpenses.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
              </div>
            </div>
            
            <div className={`${reportData.summary.balance >= 0 ? 'bg-cyan-500/20 border-cyan-500/30' : 'bg-red-500/20 border-red-500/30'} rounded-lg p-4`}>
              <div className={`${reportData.summary.balance >= 0 ? 'text-cyan-400' : 'text-red-400'} text-sm font-medium`}>Saldo</div>
              <div className="text-xl font-bold text-white">
                R$ {reportData.summary.balance.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
              </div>
            </div>
            
            <div className="bg-gray-500/20 border border-gray-500/30 rounded-lg p-4">
              <div className="text-gray-400 text-sm font-medium">Transa√ß√µes</div>
              <div className="text-xl font-bold text-white">
                {reportData.summary.transactionCount}
              </div>
            </div>
          </div>

          {/* √öltimas transa√ß√µes */}
          <div className="bg-gray-800/30 rounded-lg p-4">
            <h4 className="text-white font-medium mb-3">√öltimas Transa√ß√µes</h4>
            <div className="space-y-2 max-h-48 overflow-y-auto">
              {reportData.transactions.slice(0, 10).map(transaction => (
                <div key={transaction.id} className="flex items-center justify-between p-2 bg-gray-700/30 rounded">
                  <div className="flex items-center gap-3">
                    <span className="text-lg">
                      {transaction.type === 'income' ? 'üí∞' : 'üí∏'}
                    </span>
                    <div>
                      <div className="text-white text-sm">{transaction.description}</div>
                      <div className="text-gray-400 text-xs">{transaction.category}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className={`font-bold ${transaction.type === 'income' ? 'text-green-400' : 'text-red-400'}`}>
                      R$ {Math.abs(transaction.amount).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                    </div>
                    <div className="text-xs text-gray-400">
                      {new Date(transaction.date).toLocaleDateString('pt-BR')}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default FinancialReportGenerator;
