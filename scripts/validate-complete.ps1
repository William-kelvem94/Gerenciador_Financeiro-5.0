# üîç Valida√ß√£o Completa do Sistema - Will Finance 5.0
# Script master que executa todas as valida√ß√µes necess√°rias

param(
    [switch]$Fix,
    [switch]$Verbose,
    [switch]$SkipTests
)

# Verificar se o script est√° sendo executado no PowerShell
if (-not $PSVersionTable) {
    Write-Error "Este script deve ser executado no PowerShell"
    exit 1
}

Write-Host "üéØ Will Finance 5.0 - Valida√ß√£o Completa do Sistema" -ForegroundColor Cyan
Write-Host "===================================================" -ForegroundColor Gray

# =====================================================
# üîß Configura√ß√µes Iniciais
# =====================================================
$ErrorActionPreference = "Continue"
$projectRoot = $PSScriptRoot
$logFile = Join-Path $projectRoot "system-validation-complete.log"
$hasErrors = $false
$hasWarnings = $false

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Add-Content -Path $logFile -Value $logEntry
    
    switch ($Level) {
        "ERROR" { 
            Write-Host "‚ùå $Message" -ForegroundColor Red
            $script:hasErrors = $true
        }
        "WARN" { 
            Write-Host "‚ö†Ô∏è $Message" -ForegroundColor Yellow
            $script:hasWarnings = $true
        }
        "SUCCESS" { Write-Host "‚úÖ $Message" -ForegroundColor Green }
        default { 
            if ($Verbose) {
                Write-Host "‚ÑπÔ∏è $Message" -ForegroundColor White 
            }
        }
    }
}

# =====================================================
# üõ†Ô∏è 1. Executar Corre√ß√µes (se solicitado)
# =====================================================
if ($Fix) {
    Write-Host "`nüõ†Ô∏è 1. Aplicando Corre√ß√µes Autom√°ticas..." -ForegroundColor Yellow
    
    $fixScript = Join-Path $projectRoot "scripts\fix-security-issues.ps1"
    if (Test-Path $fixScript) {
        try {
            & $fixScript
            Write-Log "Corre√ß√µes autom√°ticas aplicadas com sucesso" "SUCCESS"
        } catch {
            Write-Log "Erro ao aplicar corre√ß√µes: $($_.Exception.Message)" "ERROR"
        }
    } else {
        Write-Log "Script de corre√ß√µes n√£o encontrado: $fixScript" "ERROR"
    }
} else {
    Write-Host "`n‚è≠Ô∏è 1. Pulando Corre√ß√µes (use -Fix para aplicar)" -ForegroundColor Gray
}

# =====================================================
# üîí 2. Valida√ß√£o de Seguran√ßa
# =====================================================
Write-Host "`nüîí 2. Executando Valida√ß√£o de Seguran√ßa..." -ForegroundColor Yellow

$securityScript = Join-Path $projectRoot "scripts\validate-security.ps1"
if (Test-Path $securityScript) {
    try {
        $securityResult = & $securityScript
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Valida√ß√£o de seguran√ßa: APROVADA" "SUCCESS"
        } else {
            Write-Log "Valida√ß√£o de seguran√ßa: FALHOU" "ERROR"
        }
    } catch {
        Write-Log "Erro na valida√ß√£o de seguran√ßa: $($_.Exception.Message)" "ERROR"
    }
} else {
    Write-Log "Script de valida√ß√£o de seguran√ßa n√£o encontrado" "ERROR"
}

# =====================================================
# üì¶ 3. Verifica√ß√£o de Depend√™ncias
# =====================================================
Write-Host "`nüì¶ 3. Verificando Depend√™ncias..." -ForegroundColor Yellow

$packageFiles = @(
    "package.json",
    "server\package.json", 
    "client\package.json"
)

foreach ($packageFile in $packageFiles) {
    $packagePath = Join-Path $projectRoot $packageFile
    if (Test-Path $packagePath) {
        Write-Log "Verificando $packageFile..." "INFO"
        
        try {
            $package = Get-Content $packagePath | ConvertFrom-Json
            $depCount = 0
            
            if ($package.dependencies) {
                $depCount += ($package.dependencies.PSObject.Properties | Measure-Object).Count
            }
            if ($package.devDependencies) {
                $depCount += ($package.devDependencies.PSObject.Properties | Measure-Object).Count
            }
            
            Write-Log "$packageFile: $depCount depend√™ncias encontradas" "SUCCESS"
        } catch {
            Write-Log "Erro ao ler $packageFile: $($_.Exception.Message)" "ERROR"
        }
    } else {
        Write-Log "$packageFile n√£o encontrado" "ERROR"
    }
}

# =====================================================
# üß™ 4. Executar Testes (se n√£o pulado)
# =====================================================
if (-not $SkipTests) {
    Write-Host "`nüß™ 4. Executando Testes..." -ForegroundColor Yellow
    
    try {
        # Testes do servidor
        Write-Log "Executando testes do servidor..." "INFO"
        Set-Location (Join-Path $projectRoot "server")
        $serverTestResult = npm test 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Testes do servidor: APROVADOS" "SUCCESS"
        } else {
            Write-Log "Testes do servidor: FALHARAM" "WARN"
            if ($Verbose) {
                Write-Log $serverTestResult "INFO"
            }
        }
        
        # Testes do cliente
        Write-Log "Executando testes do cliente..." "INFO"
        Set-Location (Join-Path $projectRoot "client")
        $clientTestResult = npm test -- --run 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Testes do cliente: APROVADOS" "SUCCESS"
        } else {
            Write-Log "Testes do cliente: FALHARAM" "WARN"
            if ($Verbose) {
                Write-Log $clientTestResult "INFO"
            }
        }
        
        Set-Location $projectRoot
    } catch {
        Write-Log "Erro ao executar testes: $($_.Exception.Message)" "ERROR"
    }
} else {
    Write-Host "`n‚è≠Ô∏è 4. Pulando Testes (use sem -SkipTests para executar)" -ForegroundColor Gray
}

# =====================================================
# üê≥ 5. Valida√ß√£o Docker
# =====================================================
Write-Host "`nüê≥ 5. Validando Configura√ß√£o Docker..." -ForegroundColor Yellow

$dockerFiles = @("docker\docker-compose.yml", "docker\docker-compose.prod.yml")
foreach ($dockerFile in $dockerFiles) {
    $dockerPath = Join-Path $projectRoot $dockerFile
    if (Test-Path $dockerPath) {
        Write-Log "Validando $dockerFile..." "INFO"
        
        try {
            # Verificar se o docker-compose est√° dispon√≠vel
            $composeCheck = docker-compose config -f $dockerPath 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Log "$dockerFile: Configura√ß√£o v√°lida" "SUCCESS"
            } else {
                Write-Log "$dockerFile: Configura√ß√£o inv√°lida" "WARN"
                if ($Verbose) {
                    Write-Log $composeCheck "INFO"
                }
            }
        } catch {
            Write-Log "Docker Compose n√£o dispon√≠vel para validar $dockerFile" "WARN"
        }
    } else {
        Write-Log "$dockerFile n√£o encontrado" "ERROR"
    }
}

# =====================================================
# üåê 6. Valida√ß√£o de Configura√ß√£o Web
# =====================================================
Write-Host "`nüåê 6. Validando Configura√ß√µes Web..." -ForegroundColor Yellow

$webConfigs = @(
    "nginx\nginx.conf",
    "nginx\nginx.prod.conf",
    "client\vite.config.ts",
    "server\tsconfig.json"
)

foreach ($config in $webConfigs) {
    $configPath = Join-Path $projectRoot $config
    if (Test-Path $configPath) {
        Write-Log "Configura√ß√£o $config encontrada" "SUCCESS"
    } else {
        Write-Log "Configura√ß√£o $config n√£o encontrada" "WARN"
    }
}

# =====================================================
# üìä 7. Verifica√ß√£o de Performance
# =====================================================
Write-Host "`nüìä 7. Verificando Configura√ß√µes de Performance..." -ForegroundColor Yellow

# Verificar se h√° configura√ß√µes de cache, compress√£o, etc.
$performanceChecks = @{
    "client\vite.config.ts" = @("build", "rollupOptions")
    "nginx\nginx.conf" = @("gzip", "compression")
    "server\package.json" = @("compression", "helmet")
}

foreach ($file in $performanceChecks.Keys) {
    $filePath = Join-Path $projectRoot $file
    if (Test-Path $filePath) {
        $content = Get-Content $filePath -Raw
        $checks = $performanceChecks[$file]
        
        foreach ($check in $checks) {
            if ($content -match $check) {
                Write-Log "$file: $check configurado" "SUCCESS"
            } else {
                Write-Log "$file: $check n√£o encontrado" "WARN"
            }
        }
    }
}

# =====================================================
# üîç 8. Verifica√ß√£o de Estrutura de Arquivos
# =====================================================
Write-Host "`nüîç 8. Verificando Estrutura de Arquivos..." -ForegroundColor Yellow

$requiredDirs = @(
    "client\src\components",
    "client\src\services", 
    "server\src",
    "server\prisma",
    "IA\src",
    "docs",
    "scripts"
)

foreach ($dir in $requiredDirs) {
    $dirPath = Join-Path $projectRoot $dir
    if (Test-Path $dirPath -PathType Container) {
        Write-Log "Diret√≥rio $dir existe" "SUCCESS"
    } else {
        Write-Log "Diret√≥rio $dir n√£o encontrado" "WARN"
    }
}

# =====================================================
# üìã 9. Relat√≥rio Final
# =====================================================
Write-Host "`nüìã Relat√≥rio Final da Valida√ß√£o" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Gray

$totalChecks = 50  # Estimativa do n√∫mero total de verifica√ß√µes
$errorCount = (Get-Content $logFile | Select-String "ERROR").Count
$warnCount = (Get-Content $logFile | Select-String "WARN").Count
$successCount = (Get-Content $logFile | Select-String "SUCCESS").Count

Write-Host "`nüìä Estat√≠sticas:" -ForegroundColor White
Write-Host "   ‚úÖ Sucessos: $successCount" -ForegroundColor Green
Write-Host "   ‚ö†Ô∏è Avisos: $warnCount" -ForegroundColor Yellow
Write-Host "   ‚ùå Erros: $errorCount" -ForegroundColor Red

$scorePercentage = [math]::Round((($successCount / ($successCount + $warnCount + $errorCount)) * 100), 1)
Write-Host "`nüéØ Score Geral: $scorePercentage%" -ForegroundColor $(
    if ($scorePercentage -ge 90) { "Green" }
    elseif ($scorePercentage -ge 75) { "Yellow" }
    else { "Red" }
)

# Status final
if ($hasErrors) {
    Write-Log "VALIDA√á√ÉO FALHOU - Erros cr√≠ticos encontrados!" "ERROR"
    Write-Host "`nüîß Para corrigir automaticamente:" -ForegroundColor Yellow
    Write-Host "   .\validate-complete.ps1 -Fix" -ForegroundColor White
    $exitCode = 1
} elseif ($hasWarnings) {
    Write-Log "VALIDA√á√ÉO CONCLU√çDA - Avisos encontrados" "WARN"
    Write-Host "`n‚ú® Sistema funcional com melhorias recomendadas" -ForegroundColor Yellow
    $exitCode = 0
} else {
    Write-Log "VALIDA√á√ÉO APROVADA - Sistema 100% validado!" "SUCCESS"
    Write-Host "`nüéâ Sistema pronto para produ√ß√£o!" -ForegroundColor Green
    $exitCode = 0
}

# =====================================================
# üìù Salvar relat√≥rio final
# =====================================================
$reportSummary = @"
üéØ WILL FINANCE 5.0 - RELAT√ìRIO DE VALIDA√á√ÉO COMPLETA
====================================================
Data: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
Score: $scorePercentage%

Estat√≠sticas:
‚úÖ Sucessos: $successCount
‚ö†Ô∏è Avisos: $warnCount  
‚ùå Erros: $errorCount

Status: $(if ($hasErrors) { "FALHOU" } elseif ($hasWarnings) { "APROVADO COM AVISOS" } else { "APROVADO" })

Pr√≥ximos passos:
$(if ($hasErrors) { "1. Execute: .\validate-complete.ps1 -Fix" } else { "1. Sistema pronto para uso" })
$(if ($hasWarnings) { "2. Verifique avisos no log detalhado" } else { "2. Inicie com: npm run dev" })

Log detalhado: $logFile
"@

$reportFile = Join-Path $projectRoot "validation-report.txt"
Set-Content -Path $reportFile -Value $reportSummary

Write-Host "`nüìù Relat√≥rio completo salvo em: $reportFile" -ForegroundColor Gray
Write-Host "üìù Log detalhado em: $logFile" -ForegroundColor Gray

exit $exitCode
