# Docker Compose for Production Deployment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: willfinance-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-willfinance}
      POSTGRES_USER: ${POSTGRES_USER:-willfinance}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - willfinance-network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-willfinance} -d ${POSTGRES_DB:-willfinance}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: willfinance-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - willfinance-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Will Finance Backend
  server:
    build:
      context: .
      dockerfile: docker/Dockerfile.server
      target: production
    container_name: willfinance-server-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://${POSTGRES_USER:-willfinance}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-willfinance}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - server_uploads:/app/uploads
      - server_logs:/app/logs
    networks:
      - willfinance-network
    ports:
      - "${SERVER_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Will Finance Frontend
  client:
    build:
      context: .
      dockerfile: docker/Dockerfile.client
      target: production
    container_name: willfinance-client-prod
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      VITE_APP_NAME: ${VITE_APP_NAME:-Will Finance}
      VITE_APP_VERSION: ${VITE_APP_VERSION:-5.0.0}
    networks:
      - willfinance-network
    ports:
      - "${CLIENT_PORT:-80}:80"
    depends_on:
      - server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: willfinance-nginx-prod
    restart: unless-stopped
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - willfinance-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - client
      - server
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

networks:
  willfinance-network:
    driver: bridge
    name: willfinance-network

volumes:
  postgres_data:
    driver: local
    name: willfinance_postgres_data
  redis_data:
    driver: local
    name: willfinance_redis_data
  server_uploads:
    driver: local
    name: willfinance_server_uploads
  server_logs:
    driver: local
    name: willfinance_server_logs
