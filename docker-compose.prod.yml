version: '3.8'

services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://localhost:3000
      - VITE_AI_ENABLED=true
    depends_on:
      server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - will-finance-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./dev.db
      - AI_API_URL=http://ia-service:8000
      - AI_API_KEY=${AI_API_KEY:-default-key}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
    volumes:
      - ./server/prisma/dev.db:/app/prisma/dev.db
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      ia-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - will-finance-network

  ia-service:
    build:
      context: ./IA
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - API_KEY=${AI_API_KEY:-default-key}
    volumes:
      - ./IA/models:/app/models
      - ./IA/datasets:/app/datasets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - will-finance-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: willfinance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - will-finance-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - will-finance-network

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - client
      - server
    restart: unless-stopped
    networks:
      - will-finance-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  will-finance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
