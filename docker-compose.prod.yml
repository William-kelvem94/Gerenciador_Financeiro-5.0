# === üöÄ WILL FINANCE 5.0 - DOCKER COMPOSE PRODU√á√ÉO === #
# Configura√ß√£o otimizada para produ√ß√£o
# Multiplataforma: Windows, Linux, Ubuntu

version: '3.8'

# ===== VOLUMES ===== #
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  ssl_certs:
    driver: local
  nginx_logs:
    driver: local

# ===== NETWORKS ===== #
networks:
  will-finance-frontend:
    driver: bridge
  will-finance-backend:
    driver: bridge
  will-finance-database:
    driver: bridge
    internal: true

# ===== SERVICES ===== #
services:
  # ===== DATABASE - PostgreSQL ===== #
  postgres:
    image: postgres:15-alpine
    container_name: will-finance-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/db/postgresql.prod.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - will-finance-database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # ===== CACHE - Redis ===== #
  redis:
    image: redis:7-alpine
    container_name: will-finance-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - will-finance-backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # ===== BACKEND - NestJS API ===== #
  api:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: will-finance-api-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    volumes:
      - app_uploads:/app/uploads
    networks:
      - will-finance-backend
      - will-finance-database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # ===== FRONTEND - React/Vite (Build est√°tico) ===== #
  web:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
        VITE_API_URL: ${VITE_API_URL}
    container_name: will-finance-web-prod
    restart: always
    networks:
      - will-finance-frontend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # ===== REVERSE PROXY - Nginx ===== #
  nginx:
    image: nginx:alpine
    container_name: will-finance-nginx-prod
    restart: always
    volumes:
      - ./infra/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - will-finance-frontend
      - will-finance-backend
    depends_on:
      - web
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
