version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: will-finance-db
    environment:
      POSTGRES_USER: will_finance
      POSTGRES_PASSWORD: cyberpunk2077
      POSTGRES_DB: will_finance_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backup:/backup
    networks:
      - will-finance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U will_finance -d will_finance_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: will-finance-cache
    command: redis-server --appendonly yes --requirepass cyberpunk2077
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - will-finance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "cyberpunk2077", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: will-finance-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://will_finance:cyberpunk2077@postgres:5432/will_finance_db
      REDIS_URL: redis://:cyberpunk2077@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production-2024-cyberpunk}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production-2024}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:5173}
      PORT: 8080
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
      # Firebase Config
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # Email Config
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      # File Upload
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      # Security
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      # Monitoring
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - will-finance-network
    restart: unless-stopped
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # AI Service
  ai-service:
    build:
      context: ./IA
      dockerfile: Dockerfile
    container_name: will-finance-ai
    environment:
      AI_API_PORT: 8001
      AI_MODEL_PATH: /app/models
      AI_LOG_LEVEL: ${AI_LOG_LEVEL:-INFO}
      DATABASE_URL: postgresql://will_finance:cyberpunk2077@postgres:5432/will_finance_db
      REDIS_URL: redis://:cyberpunk2077@redis:6379
      ENVIRONMENT: production
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - will-finance-network
    restart: unless-stopped
    volumes:
      - ai_models:/app/models
      - ai_data:/app/data
      - ./IA/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: will-finance-client
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8080}
      VITE_FIREBASE_API_KEY: ${VITE_FIREBASE_API_KEY}
      VITE_FIREBASE_AUTH_DOMAIN: ${VITE_FIREBASE_AUTH_DOMAIN}
      VITE_FIREBASE_PROJECT_ID: ${VITE_FIREBASE_PROJECT_ID}
      VITE_FIREBASE_STORAGE_BUCKET: ${VITE_FIREBASE_STORAGE_BUCKET}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${VITE_FIREBASE_MESSAGING_SENDER_ID}
      VITE_FIREBASE_APP_ID: ${VITE_FIREBASE_APP_ID}
      VITE_GOOGLE_CLIENT_ID: ${VITE_GOOGLE_CLIENT_ID}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - will-finance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Load Balancer (optional for production)
  nginx:
    image: nginx:alpine
    container_name: will-finance-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      client:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - will-finance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    profiles:
      - production

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: will-finance-backup
    environment:
      PGPASSWORD: cyberpunk2077
    volumes:
      - ./database/backup:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - will-finance-network
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "chmod +x /backup.sh && crond -f"
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  ai_models:
    driver: local
  ai_data:
    driver: local

networks:
  will-finance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
