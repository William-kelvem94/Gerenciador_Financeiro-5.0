# === ðŸš€ WILL FINANCE 5.0 - DOCKER COMPOSE MULTIPLATAFORMA === #
# CompatÃ­vel com Windows, Linux e Ubuntu
# Suporte para desenvolvimento e produÃ§Ã£o

version: '3.8'

# ===== VOLUMES ===== #
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local

# ===== NETWORKS ===== #
networks:
  will-finance-network:
    driver: bridge

# ===== SERVICES ===== #
services:
  # ===== DATABASE - PostgreSQL ===== #
  postgres:
    image: postgres:15-alpine
    container_name: will-finance-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-will_finance}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - will-finance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-will_finance}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===== CACHE - Redis ===== #
  redis:
    image: redis:7-alpine
    container_name: will-finance-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - will-finance-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ===== BACKEND - NestJS API ===== #
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: will-finance-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8080
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres123}@postgres:5432/${DB_NAME:-will_finance}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-will-finance-jwt-secret-key-2024}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    volumes:
      - app_uploads:/app/uploads
      - ./server/src:/app/src:ro
    ports:
      - "${API_PORT:-8080}:8080"
    networks:
      - will-finance-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== FRONTEND - React/Vite ===== #
  web:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
    container_name: will-finance-web
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
    volumes:
      - ./client/src:/app/src:ro
    ports:
      - "${WEB_PORT:-5173}:5173"
    networks:
      - will-finance-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== REVERSE PROXY - Nginx ===== #
  nginx:
    image: nginx:alpine
    container_name: will-finance-nginx
    restart: unless-stopped
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - will-finance-network
    depends_on:
      - web
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
