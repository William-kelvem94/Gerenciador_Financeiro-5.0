# === üèóÔ∏è WILL FINANCE 5.0 - FRONTEND DOCKERFILE PRODU√á√ÉO === #
# Build otimizado para produ√ß√£o multiplataforma

# ===== STAGE 1: Build do Frontend ===== #
FROM node:20-alpine AS builder

# Metadados
LABEL maintainer="Will Finance Team"
LABEL version="5.0.0"
LABEL description="Will Finance 5.0 Frontend - Production Build"

# Diret√≥rio de trabalho
WORKDIR /app

# Argumentos de build
ARG NODE_ENV=production
ARG VITE_API_URL
ARG VITE_APP_TITLE="Will Finance 5.0"

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copiar arquivos de depend√™ncias
COPY package*.json ./
COPY yarn.lock* ./

# Instalar depend√™ncias de produ√ß√£o
RUN npm ci --only=production --silent

# Copiar c√≥digo fonte
COPY . .

# Configurar vari√°veis de ambiente
ENV NODE_ENV=${NODE_ENV}
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_APP_TITLE=${VITE_APP_TITLE}

# Build da aplica√ß√£o
RUN npm run build

# ===== STAGE 2: Nginx para servir arquivos est√°ticos ===== #
FROM nginx:alpine AS production

# Instalar curl para healthcheck
RUN apk add --no-cache curl

# Remover configura√ß√£o padr√£o do nginx
RUN rm -rf /usr/share/nginx/html/*

# Copiar build da aplica√ß√£o
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configura√ß√£o do nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -u 1001 -G nginx-user

# Definir permiss√µes
RUN chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Expor porta
EXPOSE 80

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Usar usu√°rio n√£o-root
USER nginx-user

# Comando de inicializa√ß√£o
CMD ["nginx", "-g", "daemon off;"]
