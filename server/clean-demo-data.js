#!/usr/bin/env node

/**
 * Script para limpar todos os dados demo/mock do Will Finance
 * Remove dados fict√≠cios do banco de dados e limpa p√°ginas com dados est√°ticos
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanDemoData() {
  console.log('üßπ WILL FINANCE - LIMPEZA DE DADOS DEMO/MOCK\n');
  console.log('==============================================\n');

  try {
    console.log('üóëÔ∏è  1. Removendo dados demo/mock do banco...');

    // Remover transa√ß√µes demo/fict√≠cias
    const deletedTransactions = await prisma.transaction.deleteMany({
      where: {
        OR: [
          { description: { contains: 'Demo' } },
          { description: { contains: 'Teste' } },
          { description: { contains: 'Sample' } },
          { description: { contains: 'Exemplo' } },
          { description: { contains: 'Mock' } },
          { description: { contains: 'Fict√≠cio' } },
          { description: { contains: 'Demonstra√ß√£o' } },
          // Dados espec√≠ficos dos mocks
          { description: { contains: 'SAL√ÅRIO EMPRESA TECH LTDA' } },
          { description: { contains: 'PIX ENVIADO JO√ÉO' } },
          { description: { contains: 'COMPRA D√âBITO SUPERMERCADO' } },
          { description: { contains: 'TRANSFER√äNCIA TED MARIA' } },
          { description: { contains: 'Uber' } },
          { description: { contains: 'iFood' } },
          { description: { contains: 'Amazon Livros' } },
          { description: { contains: 'Farm√°cia Drogasil' } }
        ]
      }
    });

    console.log(`   ‚úÖ ${deletedTransactions.count} transa√ß√µes demo removidas`);

    // Remover categorias demo
    const deletedCategories = await prisma.category.deleteMany({
      where: {
        OR: [
          { name: { contains: 'Demo' } },
          { name: { contains: 'Teste' } },
          { name: { contains: 'Sample' } },
          { description: { contains: 'demonstra√ß√£o' } },
          { description: { contains: 'exemplo' } },
          { description: { contains: 'teste' } }
        ]
      }
    });

    console.log(`   ‚úÖ ${deletedCategories.count} categorias demo removidas`);

    // Remover contas demo
    const deletedAccounts = await prisma.account.deleteMany({
      where: {
        OR: [
          { name: { contains: 'Demo' } },
          { name: { contains: 'Teste' } },
          { name: { contains: 'Sample' } },
          { description: { contains: 'demonstra√ß√£o' } },
          { description: { contains: 'exemplo' } },
          { description: { contains: 'fict√≠cios' } }
        ]
      }
    });

    console.log(`   ‚úÖ ${deletedAccounts.count} contas demo removidas`);

    // Remover usu√°rio demo se existir
    const deletedUsers = await prisma.user.deleteMany({
      where: {
        OR: [
          { email: 'demo@willfinance.com' },
          { name: { contains: 'Demo' } },
          { name: { contains: 'Usu√°rio' } }
        ]
      }
    });

    console.log(`   ‚úÖ ${deletedUsers.count} usu√°rios demo removidos`);

    console.log('\nüìä 2. Estat√≠sticas ap√≥s limpeza...');
    
    const stats = {
      transactions: await prisma.transaction.count(),
      categories: await prisma.category.count(),
      accounts: await prisma.account.count(),
      users: await prisma.user.count()
    };

    console.log(`   üìà Transa√ß√µes restantes: ${stats.transactions}`);
    console.log(`   üè∑Ô∏è  Categorias restantes: ${stats.categories}`);
    console.log(`   üè¶ Contas restantes: ${stats.accounts}`);
    console.log(`   üë§ Usu√°rios restantes: ${stats.users}`);

    console.log('\n‚úÖ LIMPEZA CONCLU√çDA COM SUCESSO!');
    console.log('\nüìù PR√ìXIMOS PASSOS:');
    console.log('   1. As p√°ginas no frontend agora mostrar√£o dados vazios/reais');
    console.log('   2. Use a funcionalidade de importa√ß√£o para adicionar dados reais');
    console.log('   3. Crie transa√ß√µes, categorias e contas conforme necess√°rio');
    console.log('\nüöÄ Sistema pronto para dados reais!');

  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar limpeza
cleanDemoData();
