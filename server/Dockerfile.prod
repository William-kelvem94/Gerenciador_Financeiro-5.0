# === üöÄ WILL FINANCE 5.0 - BACKEND DOCKERFILE PRODU√á√ÉO === #
# Build otimizado para produ√ß√£o multiplataforma

# ===== STAGE 1: Depend√™ncias ===== #
FROM node:20-alpine AS dependencies

# Metadados
LABEL maintainer="Will Finance Team"
LABEL version="5.0.0"
LABEL description="Will Finance 5.0 Backend - Production Build"

# Diret√≥rio de trabalho
WORKDIR /app

# Instalar depend√™ncias do sistema
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl \
    curl \
    && rm -rf /var/cache/apk/*

# Copiar arquivos de depend√™ncias
COPY package*.json ./
COPY yarn.lock* ./

# Instalar depend√™ncias de produ√ß√£o
RUN npm ci --only=production --silent && npm cache clean --force

# ===== STAGE 2: Build da aplica√ß√£o ===== #
FROM node:20-alpine AS builder

WORKDIR /app

# Instalar depend√™ncias de build
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copiar depend√™ncias instaladas
COPY --from=dependencies /app/node_modules ./node_modules

# Copiar c√≥digo fonte
COPY . .

# Build da aplica√ß√£o
RUN npm run build

# ===== STAGE 3: Produ√ß√£o ===== #
FROM node:20-alpine AS production

# Argumentos de build
ARG NODE_ENV=production
ARG PORT=8080

# Vari√°veis de ambiente
ENV NODE_ENV=${NODE_ENV}
ENV PORT=${PORT}
ENV NPM_CONFIG_LOGLEVEL=warn

# Instalar depend√™ncias de runtime
RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001 -G nodejs

# Diret√≥rio de trabalho
WORKDIR /app

# Copiar depend√™ncias de produ√ß√£o
COPY --from=dependencies --chown=nestjs:nodejs /app/node_modules ./node_modules

# Copiar aplica√ß√£o buildada
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma

# Criar diret√≥rios necess√°rios
RUN mkdir -p logs uploads tmp && \
    chown -R nestjs:nodejs logs uploads tmp

# Gerar cliente Prisma
RUN npx prisma generate

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:${PORT}/health || exit 1

# Expor porta
EXPOSE ${PORT}

# Usar usu√°rio n√£o-root
USER nestjs

# Comando de inicializa√ß√£o
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main"]
