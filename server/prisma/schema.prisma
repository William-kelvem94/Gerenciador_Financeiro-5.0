generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts     Account[]
  transactions Transaction[]
  budgets      Budget[]
  goals        Goal[]

  @@map("users")
}

model Account {
  id          String   @id @default(cuid())
  name        String
  type        String   // checking, savings, credit, etc
  balance     Float    @default(0)
  currency    String   @default("BRL")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  icon      String
  color     String
  type      String   // income, expense
  createdAt DateTime @default(now())

  // Relations
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  type        String   // income, expense, transfer
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId  String
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Budget {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  spent     Float    @default(0)
  period    String   // monthly, yearly
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Goal {
  id          String   @id @default(cuid())
  name        String
  description String?
  targetAmount Float
  currentAmount Float   @default(0)
  deadline    DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}
