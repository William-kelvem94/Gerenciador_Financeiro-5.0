name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Install server dependencies
      run: |
        cd server
        npm ci
        
    - name: Install client dependencies
      run: |
        cd client
        npm ci

  lint-and-test:
    name: Lint, Test & Build
    runs-on: ubuntu-latest
    needs: setup
    
    strategy:
      matrix:
        component: [server, client]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd ${{ matrix.component }}
        npm ci
      
    - name: Lint code (${{ matrix.component }})
      run: |
        cd ${{ matrix.component }}
        npm run lint || echo "Lint issues found"
      continue-on-error: true
      
    - name: Type check and build (${{ matrix.component }})
      run: |
        cd ${{ matrix.component }}
        if [ "${{ matrix.component }}" = "server" ]; then
          npx tsc --noEmit
        else
          npm run build
        fi
        
    - name: Run tests (${{ matrix.component }})
      run: |
        cd ${{ matrix.component }}
        if [ "${{ matrix.component }}" = "server" ]; then
          echo "Server tests - setting up test database"
          DATABASE_URL="file:./test.db" npx prisma migrate dev --name init || true
          npm run test || echo "Tests need implementation"
        else
          npm run test || echo "Client tests need implementation"
        fi
      continue-on-error: true

  build-and-security:
    name: Build & Security Audit
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install all dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
      
    - name: Build server
      run: |
        cd server
        npx tsc
        
    - name: Build client
      run: |
        cd client
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          client/dist
          server/dist
        retention-days: 7

    - name: Run security audit
      run: |
        echo "üîç Checking production dependencies for vulnerabilities..."
        npm audit --production --audit-level=moderate || echo "Security issues found - review needed"
        cd server
        npm audit --production --audit-level=moderate || echo "Server security issues found"
        cd ../client
        npm audit --production --audit-level=moderate || echo "Client security issues found"
      continue-on-error: true
      
    - name: Check for outdated dependencies
      run: |
        echo "üì¶ Checking for outdated dependencies..."
        npm outdated || echo "Some dependencies are outdated"
      continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-and-security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        echo "üê≥ Testing Docker builds..."
        docker-compose build --no-cache server || echo "Server Docker build failed"
        docker-compose build --no-cache client || echo "Client Docker build failed"
      continue-on-error: true