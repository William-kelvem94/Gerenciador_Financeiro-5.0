#!/usr/bin/env powershell
# üîç Script de Valida√ß√£o Final - Will Finance 5.0

Write-Host "üéØ Will Finance 5.0 - Valida√ß√£o Final do Sistema" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Yellow

# Fun√ß√£o para logging
function Write-Log {
    param($Message, $Color = "White")
    Write-Host "$(Get-Date -Format 'HH:mm:ss') $Message" -ForegroundColor $Color
}

# Fun√ß√£o para fazer requests HTTP
function Test-Endpoint {
    param($Url, $ExpectedStatus = 200, $Description)
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq $ExpectedStatus) {
            Write-Log "‚úÖ $Description - OK ($($response.StatusCode))" "Green"
            return $true
        } else {
            Write-Log "‚ö†Ô∏è $Description - Status inesperado: $($response.StatusCode)" "Yellow"
            return $false
        }
    } catch {
        Write-Log "‚ùå $Description - FALHOU: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Verificar se os servi√ßos est√£o rodando
Write-Log "üîç Verificando status dos servi√ßos Docker..." "Yellow"

$dockerServices = @("client", "server", "ia-service", "postgres")
$allServicesUp = $true

foreach ($service in $dockerServices) {
    $status = docker-compose ps -q $service 2>$null
    if ($status) {
        $running = docker inspect --format='{{.State.Running}}' $status 2>$null
        if ($running -eq "true") {
            Write-Log "‚úÖ Servi√ßo $service est√° rodando" "Green"
        } else {
            Write-Log "‚ùå Servi√ßo $service n√£o est√° rodando" "Red"
            $allServicesUp = $false
        }
    } else {
        Write-Log "‚ùå Servi√ßo $service n√£o foi encontrado" "Red"
        $allServicesUp = $false
    }
}

# Health checks dos servi√ßos
Write-Log "üè• Executando health checks..." "Yellow"

$healthChecks = @(
    @{ Url = "http://localhost:3000/health"; Description = "Backend API Health" },
    @{ Url = "http://localhost:8000/health"; Description = "IA Service Health" },
    @{ Url = "http://localhost:80"; Description = "Frontend Application"; ExpectedStatus = 200 }
)

$healthOk = $true
foreach ($check in $healthChecks) {
    $status = if ($check.ExpectedStatus) { $check.ExpectedStatus } else { 200 }
    $result = Test-Endpoint -Url $check.Url -ExpectedStatus $status -Description $check.Description
    if (-not $result) { $healthOk = $false }
}

# Testar funcionalidades cr√≠ticas
Write-Log "üß™ Testando funcionalidades cr√≠ticas..." "Yellow"

# Teste de autentica√ß√£o (criar usu√°rio demo)
Write-Log "üîê Testando sistema de autentica√ß√£o..." "Yellow"
try {
    $authPayload = @{
        email = "demo@willfinance.com"
        password = "demo123"
        name = "Usu√°rio Demo"
    } | ConvertTo-Json

    $authResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/register" -Method POST -Body $authPayload -ContentType "application/json" -TimeoutSec 10
    
    if ($authResponse.success) {
        Write-Log "‚úÖ Autentica√ß√£o - Registro funcionando" "Green"
        
        # Tentar fazer login
        $loginPayload = @{
            email = "demo@willfinance.com"
            password = "demo123"
        } | ConvertTo-Json
        
        $loginResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/login" -Method POST -Body $loginPayload -ContentType "application/json" -TimeoutSec 10
        
        if ($loginResponse.token) {
            Write-Log "‚úÖ Autentica√ß√£o - Login funcionando" "Green"
            $authToken = $loginResponse.token
        } else {
            Write-Log "‚ùå Autentica√ß√£o - Login falhou" "Red"
        }
    } else {
        Write-Log "‚ùå Autentica√ß√£o - Registro falhou" "Red"
    }
} catch {
    Write-Log "‚ùå Autentica√ß√£o - Erro: $($_.Exception.Message)" "Red"
}

# Teste de importa√ß√£o (se temos token)
if ($authToken) {
    Write-Log "üìÑ Testando importa√ß√£o de dados..." "Yellow"
    
    # Verificar se endpoint de importa√ß√£o responde
    try {
        $headers = @{ Authorization = "Bearer $authToken" }
        $importResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/import/banks" -Method GET -Headers $headers -TimeoutSec 10 -UseBasicParsing
        
        if ($importResponse.StatusCode -eq 200) {
            Write-Log "‚úÖ Import - Endpoint de bancos funcionando" "Green"
        } else {
            Write-Log "‚ö†Ô∏è Import - Endpoint com status: $($importResponse.StatusCode)" "Yellow"
        }
    } catch {
        Write-Log "‚ùå Import - Erro: $($_.Exception.Message)" "Red"
    }
}

# Teste de IA
Write-Log "ü§ñ Testando integra√ß√£o com IA..." "Yellow"
try {
    $iaPayload = @{
        text = "Pagamento Restaurante McDonald's"
        amount = 25.50
    } | ConvertTo-Json

    $iaResponse = Invoke-RestMethod -Uri "http://localhost:8000/classify" -Method POST -Body $iaPayload -ContentType "application/json" -TimeoutSec 15
    
    if ($iaResponse.category) {
        Write-Log "‚úÖ IA - Classifica√ß√£o funcionando (categoria: $($iaResponse.category))" "Green"
    } else {
        Write-Log "‚ö†Ô∏è IA - Resposta sem categoria" "Yellow"
    }
} catch {
    Write-Log "‚ùå IA - Erro: $($_.Exception.Message)" "Red"
}

# Verificar banco de dados
Write-Log "üóÑÔ∏è Testando conex√£o com banco de dados..." "Yellow"
try {
    if ($authToken) {
        $headers = @{ Authorization = "Bearer $authToken" }
        $dbResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/transactions" -Method GET -Headers $headers -TimeoutSec 10 -UseBasicParsing
        
        if ($dbResponse.StatusCode -eq 200) {
            Write-Log "‚úÖ Database - Conex√£o funcionando" "Green"
        } else {
            Write-Log "‚ö†Ô∏è Database - Status: $($dbResponse.StatusCode)" "Yellow"
        }
    } else {
        Write-Log "‚ö†Ô∏è Database - Pulando teste (sem token de auth)" "Yellow"
    }
} catch {
    Write-Log "‚ùå Database - Erro: $($_.Exception.Message)" "Red"
}

# Verificar performance
Write-Log "‚ö° Testando performance..." "Yellow"
$performanceTests = @(
    @{ Url = "http://localhost:80"; Name = "Frontend" },
    @{ Url = "http://localhost:3000/health"; Name = "Backend" }
)

foreach ($test in $performanceTests) {
    try {
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $response = Invoke-WebRequest -Uri $test.Url -UseBasicParsing -TimeoutSec 5
        $stopwatch.Stop()
        
        $responseTime = $stopwatch.ElapsedMilliseconds
        if ($responseTime -lt 1000) {
            Write-Log "‚úÖ Performance $($test.Name) - ${responseTime}ms (Excelente)" "Green"
        } elseif ($responseTime -lt 3000) {
            Write-Log "‚ö†Ô∏è Performance $($test.Name) - ${responseTime}ms (Aceit√°vel)" "Yellow"
        } else {
            Write-Log "‚ùå Performance $($test.Name) - ${responseTime}ms (Lento)" "Red"
        }
    } catch {
        Write-Log "‚ùå Performance $($test.Name) - Falhou" "Red"
    }
}

# Verificar logs por erros cr√≠ticos
Write-Log "üìã Verificando logs por erros..." "Yellow"
try {
    $logs = docker-compose logs --tail=50 server 2>$null
    $errorCount = ($logs | Select-String -Pattern "ERROR|FATAL|CRITICAL").Count
    
    if ($errorCount -eq 0) {
        Write-Log "‚úÖ Logs - Nenhum erro cr√≠tico encontrado" "Green"
    } else {
        Write-Log "‚ö†Ô∏è Logs - $errorCount erros encontrados nos logs" "Yellow"
    }
} catch {
    Write-Log "‚ö†Ô∏è Logs - N√£o foi poss√≠vel verificar logs" "Yellow"
}

# Verificar espa√ßo em disco e recursos
Write-Log "üíæ Verificando recursos do sistema..." "Yellow"

# Verificar espa√ßo em disco
$disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object Size, FreeSpace
$freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)
$totalSpaceGB = [math]::Round($disk.Size / 1GB, 2)
$freeSpacePercent = [math]::Round(($disk.FreeSpace / $disk.Size) * 100, 1)

if ($freeSpacePercent -gt 20) {
    Write-Log "‚úÖ Disco - ${freeSpaceGB}GB livres de ${totalSpaceGB}GB ($freeSpacePercent%)" "Green"
} else {
    Write-Log "‚ö†Ô∏è Disco - Pouco espa√ßo: ${freeSpaceGB}GB livres ($freeSpacePercent%)" "Yellow"
}

# Verificar mem√≥ria
$memory = Get-WmiObject -Class Win32_OperatingSystem
$totalMemoryGB = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
$freeMemoryGB = [math]::Round($memory.FreePhysicalMemory / 1MB, 2)
$usedMemoryPercent = [math]::Round((($totalMemoryGB - $freeMemoryGB) / $totalMemoryGB) * 100, 1)

if ($usedMemoryPercent -lt 80) {
    Write-Log "‚úÖ Mem√≥ria - ${freeMemoryGB}GB livres de ${totalMemoryGB}GB (${usedMemoryPercent}% usado)" "Green"
} else {
    Write-Log "‚ö†Ô∏è Mem√≥ria - Alto uso: ${usedMemoryPercent}% de ${totalMemoryGB}GB" "Yellow"
}

# Resumo final
Write-Log "" "White"
Write-Log "üìä RESUMO DA VALIDA√á√ÉO:" "Cyan"
Write-Log "========================" "Yellow"

if ($allServicesUp -and $healthOk) {
    Write-Log "üéâ SISTEMA FUNCIONANDO CORRETAMENTE!" "Green"
    Write-Log "" "White"
    Write-Log "‚úÖ Todos os servi√ßos est√£o rodando" "Green"
    Write-Log "‚úÖ Health checks passaram" "Green"
    Write-Log "‚úÖ Funcionalidades b√°sicas testadas" "Green"
    Write-Log "" "White"
    Write-Log "üîó Acesse o sistema:" "Cyan"
    Write-Log "   Frontend: http://localhost" "White"
    Write-Log "   API:      http://localhost:3000" "White"
    Write-Log "   IA:       http://localhost:8000" "White"
    Write-Log "" "White"
    Write-Log "üìö Pr√≥ximos passos:" "Cyan"
    Write-Log "   1. Fa√ßa login em http://localhost" "White"
    Write-Log "   2. Importe um extrato PDF para testar IA" "White"
    Write-Log "   3. Explore o dashboard com dados reais" "White"
    Write-Log "   4. Configure conex√µes Open Finance" "White"
} else {
    Write-Log "‚ö†Ô∏è SISTEMA COM PROBLEMAS" "Yellow"
    Write-Log "" "White"
    Write-Log "üîß A√ß√µes recomendadas:" "Yellow"
    Write-Log "   1. Execute: docker-compose down && docker-compose up -d" "White"
    Write-Log "   2. Aguarde 2-3 minutos para inicializa√ß√£o" "White"
    Write-Log "   3. Execute este script novamente" "White"
    Write-Log "   4. Verifique logs: docker-compose logs -f" "White"
}

Write-Log "" "White"
Write-Log "üîç Para monitoramento cont√≠nuo, execute:" "Cyan"
Write-Log "   docker-compose ps" "White"
Write-Log "   docker-compose logs -f" "White"
