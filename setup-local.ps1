# =====================================
# Will Finance 5.0 - Setup PowerShell Script
# Autor: William
# Vers√£o: 5.0.0
# =====================================

param(
    [switch]$Quick,
    [switch]$Docker,
    [switch]$SkipDB,
    [switch]$DevOnly,
    [string]$Environment = "development"
)

# Cores para output
$colors = @{
    Info = "Cyan"
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Header = "Magenta"
}

function Write-ColoredOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $colors[$Color]
}

function Show-Header {
    Clear-Host
    Write-ColoredOutput "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà" "Header"
    Write-ColoredOutput "‚ñà                                                          ‚ñà" "Header"
    Write-ColoredOutput "‚ñà         üöÄ WILL FINANCE 5.0 - SETUP AUTOM√ÅTICO          ‚ñà" "Header"
    Write-ColoredOutput "‚ñà                                                          ‚ñà" "Header"
    Write-ColoredOutput "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà" "Header"
    Write-Host ""
}

function Test-Prerequisites {
    Write-ColoredOutput "üîç Verificando pr√©-requisitos..." "Info"
    
    # Verificar Node.js
    try {
        $nodeVersion = node --version
        Write-ColoredOutput "‚úÖ Node.js $nodeVersion encontrado" "Success"
    }
    catch {
        Write-ColoredOutput "‚ùå Node.js n√£o encontrado! Instale Node.js 18+" "Error"
        Write-ColoredOutput "üí° Download: https://nodejs.org/" "Info"
        exit 1
    }
    
    # Verificar npm
    try {
        $npmVersion = npm --version
        Write-ColoredOutput "‚úÖ npm $npmVersion encontrado" "Success"
    }
    catch {
        Write-ColoredOutput "‚ùå npm n√£o encontrado!" "Error"
        exit 1
    }
    
    # Verificar Git (opcional)
    try {
        $gitVersion = git --version
        Write-ColoredOutput "‚úÖ Git encontrado: $gitVersion" "Success"
    }
    catch {
        Write-ColoredOutput "‚ö†Ô∏è Git n√£o encontrado (opcional)" "Warning"
    }
    
    # Verificar Docker (se necess√°rio)
    if ($Docker) {
        try {
            $dockerVersion = docker --version
            Write-ColoredOutput "‚úÖ Docker encontrado: $dockerVersion" "Success"
        }
        catch {
            Write-ColoredOutput "‚ùå Docker n√£o encontrado!" "Error"
            Write-ColoredOutput "üí° Instale Docker Desktop primeiro" "Info"
            exit 1
        }
    }
}

function Install-Dependencies {
    Write-ColoredOutput "üì¶ Instalando depend√™ncias..." "Info"
    
    if ($Quick) {
        Write-ColoredOutput "‚ö° Modo r√°pido: usando npm install" "Info"
        npm run install:quick
    } else {
        Write-ColoredOutput "üîí Modo seguro: usando npm ci" "Info"
        npm run install:all
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColoredOutput "‚úÖ Depend√™ncias instaladas com sucesso!" "Success"
    } else {
        Write-ColoredOutput "‚ùå Erro na instala√ß√£o de depend√™ncias!" "Error"
        exit 1
    }
}

function Setup-Environment {
    Write-ColoredOutput "üîß Configurando ambiente..." "Info"
    
    # Criar arquivo .env se n√£o existir
    if (!(Test-Path ".env")) {
        Copy-Item ".env.example" ".env"
        Write-ColoredOutput "üìÑ Arquivo .env criado a partir do template" "Success"
        Write-ColoredOutput "üí° Edite o arquivo .env com suas configura√ß√µes" "Info"
    } else {
        Write-ColoredOutput "üìÑ Arquivo .env j√° existe" "Info"
    }
    
    # Criar diret√≥rios necess√°rios
    $directories = @("logs", "uploads", "temp", "data")
    foreach ($dir in $directories) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-ColoredOutput "üìÅ Diret√≥rio $dir criado" "Success"
        }
    }
}

function Setup-Database {
    if ($SkipDB) {
        Write-ColoredOutput "‚è≠Ô∏è Configura√ß√£o do banco de dados ignorada" "Warning"
        return
    }
    
    Write-ColoredOutput "üóÑÔ∏è Configurando banco de dados..." "Info"
    
    try {
        npm run db:setup
        Write-ColoredOutput "‚úÖ Banco de dados configurado!" "Success"
    }
    catch {
        Write-ColoredOutput "‚ùå Erro na configura√ß√£o do banco de dados!" "Error"
        Write-ColoredOutput "üí° Tente executar manualmente: npm run db:setup" "Info"
    }
}

function Start-Development {
    if (!$DevOnly) {
        return
    }
    
    Write-ColoredOutput "üöÄ Iniciando ambiente de desenvolvimento..." "Info"
    
    if ($Docker) {
        Write-ColoredOutput "üê≥ Usando Docker..." "Info"
        npm run docker:dev
    } else {
        Write-ColoredOutput "üíª Modo local..." "Info"
        npm run dev
    }
}

function Show-Summary {
    Write-Host ""
    Write-ColoredOutput "üéâ SETUP COMPLETO!" "Success"
    Write-Host ""
    Write-ColoredOutput "üåê URLs dispon√≠veis:" "Info"
    Write-Host "   Frontend:  http://localhost:5173" -ForegroundColor White
    Write-Host "   Backend:   http://localhost:8080" -ForegroundColor White
    Write-Host "   Database:  http://localhost:5555" -ForegroundColor White
    Write-Host ""
    Write-ColoredOutput "üìã Pr√≥ximos passos:" "Info"
    Write-Host "   1. Execute: npm run dev" -ForegroundColor White
    Write-Host "   2. Acesse: http://localhost:5173" -ForegroundColor White
    Write-Host "   3. Divirta-se! üéâ" -ForegroundColor White
    Write-Host ""
    
    if (!$DevOnly) {
        Write-ColoredOutput "üí° Para iniciar o desenvolvimento:" "Info"
        Write-Host "   npm run dev" -ForegroundColor Yellow
    }
}

function Main {
    Show-Header
    
    try {
        Test-Prerequisites
        Install-Dependencies
        Setup-Environment
        Setup-Database
        Start-Development
        Show-Summary
    }
    catch {
        Write-ColoredOutput "‚ùå Erro durante o setup: $_" "Error"
        exit 1
    }
}

# Executar script principal
Main
