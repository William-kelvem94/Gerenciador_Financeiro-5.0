{
  "name": "will-finance-5.0",
  "version": "5.0.0",
  "description": "ğŸš€ Sistema de gerenciamento financeiro cyberpunk completo e multiplataforma com React + TypeScript + Vite frontend, NestJS backend, PostgreSQL, IA integrada, dockerizado e pronto para Electron/React Native.",
  "main": "index.js",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "scripts": {
    "preinstall": "echo 'ğŸš€ Iniciando instalaÃ§Ã£o do Will Finance 5.0...'",
    "postinstall": "echo 'âœ… DependÃªncias instaladas com sucesso!'",
    
    "dev": "concurrently --kill-others-on-fail --names \"SERVER,CLIENT\" --prefix-colors \"cyan,magenta\" \"npm run dev:server\" \"npm run dev:client\"",
    "dev:server": "cd server && npm run dev",
    "dev:client": "cd client && npm run dev",
    "dev:ai": "docker-compose -f docker-compose.yml -f docker-compose.ia.yml up -d",
    "dev:silent": "concurrently --kill-others-on-fail --success first \"npm run dev:server\" \"npm run dev:client\" > /dev/null 2>&1",
    
    "build": "npm run install:all && npm run build:client && npm run build:server",
    "build:client": "cd client && npm run build",
    "build:server": "cd server && npm run build",
    "build:docker": "docker-compose build --no-cache",
    
    "start": "cd server && npm start",
    "start:prod": "docker-compose up -d",
    "start:dev": "npm run dev",
    
    "install:all": "npm ci && npm run install:frontend && npm run install:backend",
    "install:frontend": "cd client && npm ci",
    "install:backend": "cd server && npm ci",
    
    "db:migrate": "cd server && npx prisma migrate dev",
    "db:generate": "cd server && npx prisma generate", 
    "db:seed": "cd server && npm run db:seed",
    "db:studio": "cd server && npx prisma studio",
    "db:setup": "npm run db:migrate && npm run db:generate && npm run db:seed",
    "db:reset": "cd server && npx prisma migrate reset --force",
    "db:deploy": "cd server && npx prisma migrate deploy",
    "db:backup": "docker exec will-finance-db pg_dump -U will_finance will_finance_db > ./database/backup/backup_$(date +%Y%m%d_%H%M%S).sql",
    "db:restore": "docker exec -i will-finance-db psql -U will_finance -d will_finance_db",
    
    "test": "npm run test:client && npm run test:server",
    "test:client": "cd client && npm run test:run",
    "test:server": "cd server && npm test",
    "test:e2e": "cd client && npm run test:e2e",
    "test:watch": "concurrently \"cd client && npm run test:watch\" \"cd server && npm run test:watch\"",
    "test:coverage": "concurrently \"cd client && npm run test:coverage\" \"cd server && npm run test:coverage\"",
    "test:import": "node ./scripts/testing/test-import-export.js",
    "test:system": "node ./scripts/testing/test-complete-system.js",
    "test:validation": "node ./scripts/testing/test-validation.js",
    "test:api": "cd server && npm run test:api",
    
    "lint": "npm run lint:client && npm run lint:server",
    "lint:client": "cd client && npm run lint",
    "lint:server": "cd server && npm run lint",
    "lint:fix": "npm run lint:client -- --fix && npm run lint:server -- --fix",
    "format": "npm run format:client && npm run format:server",
    "format:client": "cd client && npm run format",
    "format:server": "cd server && npm run format",
    
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:restart": "docker-compose restart",
    "docker:build": "docker-compose build",
    "docker:rebuild": "npm run docker:down && npm run docker:build && npm run docker:up",
    "docker:clean": "docker system prune -af && docker volume prune -f",
    "docker:prod": "docker-compose --profile production up -d",
    
    "security:audit": "npm audit && cd client && npm audit && cd ../server && npm audit",
    "security:fix": "npm audit fix && cd client && npm audit fix && cd ../server && npm audit fix",
    "security:check": "cd server && npm run security:check",
    
    "clean": "rm -rf node_modules client/node_modules server/node_modules client/dist server/dist",
    "clean:cache": "npm cache clean --force && cd client && npm cache clean --force && cd ../server && npm cache clean --force",
    "clean:data": "node ./scripts/testing/clean-demo-data.js",
    "clean:logs": "rm -rf server/logs/* client/logs/* && mkdir -p server/logs client/logs",
    "clean:docker": "docker-compose down -v && docker system prune -af",
    
    "reset": "npm run clean && npm run install:all && npm run db:setup",
    "setup": "npm run install:all && npm run db:setup && echo 'Setup completed successfully!'",
    "setup:dev": "npm run setup && npm run dev",
    "setup:docker": "npm run docker:build && npm run docker:up && echo 'Docker setup completed!'",
    
    "health": "node ./scripts/testing/health-check.js",
    "status": "docker-compose ps",
    "logs:api": "docker-compose logs -f api",
    "logs:client": "docker-compose logs -f client",
    "logs:db": "docker-compose logs -f postgres",
    
    "backup": "npm run db:backup && echo 'Backup completed!'",
    "deploy": "npm run build && npm run db:deploy && npm run start:prod",
    "deploy:staging": "npm run build && docker-compose -f docker-compose.staging.yml up -d",
    
    "docs:generate": "cd client && npm run docs:generate && cd ../server && npm run docs:generate",
    "docs:serve": "cd docs && python -m http.server 8000",
    
    "ai:start": "npm run dev:ai",
    "ai:stop": "docker-compose -f docker-compose.ia.yml down",
    "ai:logs": "docker-compose -f docker-compose.ia.yml logs -f"
  },
  "keywords": [
    "finance",
    "cyberpunk",
    "react",
    "typescript",
    "nodejs",
    "prisma",
    "sqlite",
    "pwa",
    "real-time"
  ],
  "author": "William",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "devDependencies": {
    "@types/yup": "^0.29.14",
    "concurrently": "^8.2.2"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "form-data": "^4.0.3",
    "yup": "^1.6.1"
  }
}
